buildscript {
   repositories {
      maven {
         url "http://172.28.1.6/nexus/repository/RTO-GROUP-MVN-REPO/"
      }
   }
   dependencies {
      classpath "org.openapitools:openapi-generator-gradle-plugin:4.0.0"
   }
}

plugins {
   id "io.spring.dependency-management" version "1.0.6.RELEASE"
   id "com.github.johnrengelman.shadow" version "4.0.3"
   id "org.jetbrains.kotlin.jvm" version "1.3.50"
   id "org.jetbrains.kotlin.kapt" version "1.3.50"
   id "org.jetbrains.kotlin.plugin.allopen" version "1.3.50"
   id "org.jetbrains.kotlin.plugin.noarg" version "1.3.50"
   id "jacoco"
   id "application"
   id "groovy"
   id "org.flywaydb.flyway" version "5.2.1"
}

apply plugin: 'org.openapi.generator'

version "${releaseVersion}"
group "com.hightouchinc.cynergi"

repositories {
   maven {
      url "http://172.28.1.6/nexus/repository/RTO-GROUP-MVN-REPO/"
   }
}

dependencyManagement {
   imports {
      mavenBom "io.micronaut:micronaut-bom:${micronautVersion}"
   }
}

configurations {
   // for dependencies that are needed for development only
   developmentOnly
}

sourceSets {
   test {
      groovy {
         srcDirs += 'src/test/groovy'
      }
   }
}

dependencies {
   compile "io.micronaut.configuration:micronaut-jdbc-hikari"
   compile "io.micronaut.configuration:micronaut-flyway:1.0.0.RC3"
   compile "io.micronaut:micronaut-http-server-netty"
   compile "io.micronaut.configuration:micronaut-hibernate-validator"
   compile "io.micronaut:micronaut-runtime"
   compile "io.micronaut:micronaut-spring"
   compile "io.micronaut.configuration:micronaut-postgres-reactive"
   compile "io.micronaut:micronaut-security"
   compile "io.micronaut:micronaut-security-jwt"
   kapt "io.micronaut.configuration:micronaut-openapi"
   kapt "io.micronaut:micronaut-inject-java"
   kapt "io.micronaut:micronaut-validation"

   compile "org.bouncycastle:bcprov-jdk15on:1.61"
   compile "org.bouncycastle:bcpkix-jdk15on:1.61"

   compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
   compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

   compile "org.springframework:spring-jdbc:5.1.5.RELEASE"

   compile "io.swagger.core.v3:swagger-annotations"
   runtime "org.postgresql:postgresql:42.2.5"

   compile "org.apache.commons:commons-lang3:3.8.1"
   compile "org.apache.commons:commons-csv:1.6"
   compile "commons-io:commons-io:2.6"
   compile "commons-codec:commons-codec:1.12"
   compile ("com.google.guava:guava:28.0-jre") {
      transitive = false
   }

   kaptTest "io.micronaut:micronaut-inject-java"

   runtime "ch.qos.logback:logback-classic:1.2.3"
   runtime "com.fasterxml.jackson.module:jackson-module-kotlin"

   compile "com.github.javafaker:javafaker:0.16"

   testCompile "org.codehaus.groovy:groovy-all:2.5.7"
   testCompile "org.spockframework:spock-core"
   testCompile "io.micronaut:micronaut-http-client"
   testCompile "io.micronaut:micronaut-inject-groovy"
   testCompile "io.micronaut.test:micronaut-test-spock"
   testCompile "io.micronaut.test:micronaut-test-junit5"
   testCompile "io.micronaut:micronaut-inject-java"
   testRuntime "net.bytebuddy:byte-buddy:1.8.21"
   testRuntime "org.objenesis:objenesis:2.6"
   testCompile "org.assertj:assertj-core:3.12.2"
   testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.3.1"
}

test.classpath += configurations.developmentOnly

mainClassName = "com.cynergisuite.middleware.Application"

shadowJar {
   mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '-Dmicronaut.environments=local')

test {
   useJUnitPlatform()
}

jacoco {
   toolVersion = "0.8.2"
}

allOpen {
   annotation("io.micronaut.aop.Around")
   annotation("io.micronaut.security.annotation.Secured")
   annotation("javax.inject.Singleton")
}

noArg {
   annotation("com.cynergisuite.domain.ValueObject")
   invokeInitializers = true
}

compileKotlin {
   kotlinOptions {
      jvmTarget = '1.8'
      //Will retain parameter names for Java reflection
      javaParameters = true
   }
}

compileTestKotlin {
   kotlinOptions {
      jvmTarget = '1.8'
      javaParameters = true
   }
}

task flywayMigrateCynegiDb(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
   url = 'jdbc:postgresql://localhost:6432/cynergidb'
   user = 'postgres'
   password = 'password'
   locations = ['filesystem:src/main/resources/db/migration/postgres']
}

task flywayMigrateCynergiDemoDb(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
   url = 'jdbc:postgresql://localhost:6432/cynergidemodb'
   user = 'postgres'
   password = 'password'
   locations = ['filesystem:src/main/resources/db/migration/postgres']
   cleanDisabled = false
   cleanOnValidationError = true
}

task flywayMigrateCynergiTestDb(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
   url = 'jdbc:postgresql://localhost:7432/cynergitestdb'
   user = 'postgres'
   password = 'password'
   locations = ['filesystem:src/main/resources/db/migration/postgres']
   cleanDisabled = false
   cleanOnValidationError = true
}

openApiGenerate {
   inputSpec = "$buildDir/tmp/kapt3/classes/main/META-INF/swagger/swagger.yml".toString()
   validateSpec = false
   skipValidateSpec = false
}

task buildApiDocs(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
   generatorName = "html"
   inputSpec = "$buildDir/tmp/kapt3/classes/main/META-INF/swagger/swagger.yml".toString()
   outputDir = "$buildDir/reports/openapi/".toString()
   version = releaseVersion.toString()
   auth = "Authorization:Bearer \${jwt}".toString()
   validateSpec = false
   skipValidateSpec = true
}

tasks.buildApiDocs.dependsOn(compileKotlin)

tasks.withType(JavaExec) {
   // Assign all Java system properties from
   // the command line to the JavaExec task.
   systemProperties System.properties
}

def currentCommit = {
   try {
      def hashStdOut = new ByteArrayOutputStream()

      exec {
         commandLine "git", "rev-parse", "--verify", "HEAD"
         standardOutput = hashStdOut
      }

      return hashStdOut.toString().trim()
   } catch(e) {
      println("Unable to determine commit")
      return "N/A"
   }
}

def currentBranch = {
   try {
      def branchStdOut = new ByteArrayOutputStream()

      exec {
         commandLine "git", "rev-parse", "--abbrev-ref", "HEAD"
         standardOutput = branchStdOut
      }

      return branchStdOut.toString().trim()
   } catch(e) {
      println("Unable to determine branch")
      return "N/A"
   }
}

jar {
   manifest {
      attributes(
         'HT-Built-By'       : System.properties['user.name'],
         'HT-Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
         'HT-Build-Revision' : currentCommit(),
         'HT-Source-Branch'  : currentBranch(),
         'HT-Created-By'     : "Gradle ${gradle.gradleVersion}",
         'HT-Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
         'HT-Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
         'HT-App-Version'    : releaseVersion
      )
   }
}
