import java.text.SimpleDateFormat

plugins {
   id "io.spring.dependency-management" version "1.0.6.RELEASE"
   id "com.github.johnrengelman.shadow" version "5.2.0"
   id "org.jetbrains.kotlin.jvm" version "1.3.72"
   id "org.jetbrains.kotlin.kapt" version "1.3.72"
   id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"
   id "jacoco"
   id "application"
   id "groovy"
   id "org.flywaydb.flyway" version "${flywayVersion}"
   id "org.openapi.generator" version "4.3.0"
   id "org.jmailen.kotlinter" version "2.4.1"
}

version "${releaseVersion}"
group "com.hightouchinc.cynergi"

repositories {
   jcenter()
}

dependencyManagement {
   imports {
      mavenBom "io.micronaut:micronaut-bom:${micronautVersion}"
   }
}

configurations {
   // for dependencies that are needed for development only
   developmentOnly
}

kapt {
   arguments {
      arg("micronaut.processing.incremental", false)
   }
}

kotlinter {
   experimentalRules = true
}

sourceSets {
   test {
      groovy {
         srcDirs += 'src/test/groovy'
      }
   }
}

dependencies {
   implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
   implementation "io.micronaut.sql:micronaut-jdbc-tomcat"
   implementation "io.micronaut.flyway:micronaut-flyway"
   implementation "io.micronaut.sql:micronaut-vertx-pg-client"
   implementation "io.micronaut:micronaut-http-server-netty"
   implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
   implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
   implementation "io.micronaut:micronaut-runtime"
   implementation "io.micronaut.spring:micronaut-spring"
   implementation "io.micronaut.security:micronaut-security-annotations"
   implementation "io.micronaut.security:micronaut-security-jwt"
   implementation "io.micronaut:micronaut-management"
   implementation "io.micronaut.beanvalidation:micronaut-hibernate-validator"
   implementation "io.swagger.core.v3:swagger-annotations"
   implementation "org.springframework:spring-jdbc"

   implementation "com.github.javafaker:javafaker:1.0.2" // used for testing
   implementation "org.apache.commons:commons-lang3:3.8.1"
   implementation "commons-io:commons-io:2.6"
   implementation "commons-codec:commons-codec:1.14"
   implementation("com.google.guava:guava:28.2-jre") { transitive = false }
   implementation "com.github.librepdf:openpdf:1.3.13"
   implementation "org.bouncycastle:bcprov-jdk15on:1.65"
   implementation "org.bouncycastle:bcpkix-jdk15on:1.65"
   implementation "org.springframework.security:spring-security-crypto:5.3.1.RELEASE"
   implementation "org.eclipse.collections:eclipse-collections:10.2.0"
   implementation "io.micronaut.data:micronaut-data-processor"
   implementation("io.micronaut:micronaut-inject")

   kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
   kapt "io.micronaut.openapi:micronaut-openapi"
   kapt "io.micronaut:micronaut-inject-java"
   kapt "io.micronaut:micronaut-validation"

   runtimeOnly "ch.qos.logback:logback-classic"
   runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin"
   compile "org.postgresql:postgresql"

   kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
   kaptTest "io.micronaut:micronaut-inject-java"

   testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
   testImplementation "io.micronaut:micronaut-http-client"
   testImplementation "org.spockframework:spock-core"
   testImplementation "io.micronaut:micronaut-inject-groovy"
   testImplementation "org.codehaus.groovy:groovy-json"
   testImplementation "io.micronaut.test:micronaut-test-spock"
   testImplementation "io.micronaut.test:micronaut-test-junit5"
   testCompile "org.junit.jupiter:junit-jupiter"
   testCompile "org.junit.vintage:junit-vintage-engine"
   testRuntime "net.bytebuddy:byte-buddy:1.10.10"
   testRuntime "org.objenesis:objenesis:3.1"
   testCompile "org.assertj:assertj-core:3.16.1"
}

test.classpath += configurations.developmentOnly

mainClassName = "com.cynergisuite.middleware.Application"

shadowJar {
   mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs("-noverify", "-XX:TieredStopAtLevel=1", "-Dcom.sun.management.jmxremote", "-Dmicronaut.environments=local")

test {
   useJUnitPlatform()
}

jacoco {
   toolVersion = "0.8.5"
}

allOpen {
   annotation("io.micronaut.aop.Around")
   annotation("io.micronaut.security.annotation.Secured")
   annotation("javax.inject.Singleton")
}

compileKotlin {
   kotlinOptions {
      jvmTarget = "1.8"
      //Will retain parameter names for Java reflection
      javaParameters = true
   }
}

compileTestKotlin {
   kotlinOptions {
      jvmTarget = "1.8"
      javaParameters = true
   }
}

task flywayMigrateCynergiDb(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
   url = "jdbc:postgresql://localhost:6432/cynergidb"
   user = "postgres"
   password = "password"
   locations = ["filesystem:src/main/resources/db/migration/postgres"]
}

task flywayMigrateCynergiDevelopDb(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
   url = "jdbc:postgresql://localhost:6432/cynergidevelopdb"
   user = "postgres"
   password = "password"
   locations = ["filesystem:src/main/resources/db/migration/postgres"]
   cleanDisabled = false
   cleanOnValidationError = true
}

task flywayMigrateCynergiTestDb(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
   url = "jdbc:postgresql://localhost:7432/cynergitestdb"
   user = "postgres"
   password = "password"
   locations = ["filesystem:src/main/resources/db/migration/postgres"]
   cleanDisabled = false
   cleanOnValidationError = true
}

openApiGenerate {
   inputSpec = "$buildDir/tmp/kapt3/classes/main/META-INF/swagger/cynergi-middleware.yml".toString()
   validateSpec = false
   skipValidateSpec = false
}

task buildApiDocs(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
   generatorName = "html"
   inputSpec = "$buildDir/tmp/kapt3/classes/main/META-INF/swagger/cynergi-middleware.yml".toString()
   outputDir = "$buildDir/reports/openapi/".toString()
   version = releaseVersion.toString()
   auth = "Authorization:Bearer \${jwt}".toString()
   validateSpec = false
   skipValidateSpec = true
}

tasks.buildApiDocs.dependsOn(compileKotlin)

tasks.withType(JavaExec) {
   // Assign all Java system properties from
   // the command line to the JavaExec task.
   systemProperties System.properties
}

def currentCommit = {
   try {
      def hashStdOut = new ByteArrayOutputStream()

      exec {
         commandLine "git", "rev-parse", "--verify", "HEAD"
         standardOutput = hashStdOut
      }

      return hashStdOut.toString().trim()
   } catch (ignored) {
      println("Unable to determine commit")
      return "N/A"
   }
}

def currentBranch = {
   try {
      def branchStdOut = new ByteArrayOutputStream()

      exec {
         commandLine "git", "rev-parse", "--abbrev-ref", "HEAD"
         standardOutput = branchStdOut
      }

      return branchStdOut.toString().trim()
   } catch (ignored) {
      println("Unable to determine branch")
      return "N/A"
   }
}

jar {
   manifest {
      attributes(
         "HT-Built-By": System.properties["user.name"],
         "HT-Build-Timestamp": new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
         "HT-Build-Revision": currentCommit(),
         "HT-Source-Branch": currentBranch(),
         "HT-Created-By": "Gradle ${gradle.gradleVersion}",
         "HT-Build-Jdk": "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
         "HT-Build-OS": "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
         "HT-App-Version": releaseVersion
      )
   }
}
