import java.text.SimpleDateFormat

plugins {
   id("org.jetbrains.kotlin.jvm") version "${kotlinVersion}"
   id("org.jetbrains.kotlin.kapt") version "${kotlinVersion}"
   id("org.jetbrains.kotlin.plugin.allopen") version "${kotlinVersion}"
   id("com.github.johnrengelman.shadow") version "8.1.1"
   id("io.micronaut.application") version "3.7.10"

   id "jacoco"
   id "groovy"
   id "org.flywaydb.flyway" version "${flywayVersion}"
   id "org.openapi.generator" version "4.3.0"
   id "org.jmailen.kotlinter" version "3.4.0"
   id "org.gradle.test-retry" version "1.5.4"
}

version "${releaseVersion}"
group "com.cynergisuite"
// https://docs.gradle.org/current/userguide/writing_build_scripts.html#sec:standard_project_properties
project.buildDir = "${projectDir}/build"
// https://docs.gradle.org/current/userguide/java_testing.html#communicating_test_results_to_CI_servers_and_other_tools_via_xml_files
project.testResultsDirName = "${buildDir}/test-results"

repositories {
   mavenCentral()
}

micronaut {
   runtime("netty")
   testRuntime("spock2")
   processing {
      incremental(true)
      annotations("com.cynergisuite.middleware.*")
   }
}

dependencies {
   // begin micronaut launch dependencies
   kapt("io.micronaut:micronaut-http-validation")
   kapt("io.micronaut.data:micronaut-data-processor")
   kapt("io.micronaut.openapi:micronaut-openapi")
   kapt("io.micronaut.security:micronaut-security-annotations")
   implementation("io.micronaut:micronaut-http-client")
   implementation("io.micronaut:micronaut-runtime")
   implementation("io.micronaut.cache:micronaut-cache-caffeine")
   implementation("io.micronaut.data:micronaut-data-jdbc")
   implementation ("io.micronaut.flyway:micronaut-flyway") {
      version {
         strictly("4.2.0")
      }
   }
   implementation("org.flywaydb:flyway-core") {
      version {
         strictly("7.15.0")
      }
   }
   implementation("io.micronaut.kotlin:micronaut-kotlin-extension-functions")
   implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
   implementation("io.micronaut.reactor:micronaut-reactor")
   implementation("io.micronaut.reactor:micronaut-reactor-http-client")
   implementation("io.micronaut.security:micronaut-security")
   implementation("io.micronaut.security:micronaut-security-jwt")
   implementation("io.micronaut.sql:micronaut-jdbc-hikari")
   implementation("io.micronaut.sql:micronaut-jdbi")
   implementation("io.swagger.core.v3:swagger-annotations")
   implementation("jakarta.annotation:jakarta.annotation-api")
   implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
   implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
   runtimeOnly("ch.qos.logback:logback-classic")
   implementation("org.postgresql:postgresql")

   implementation("io.micronaut:micronaut-validation")

   runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
   // end micronaut launch dependencies

   // esig additional dependencies
   implementation('org.slf4j:jul-to-slf4j:1.7.36')
   implementation("org.slf4j:log4j-over-slf4j:1.7.36")
   implementation('org.slf4j:jcl-over-slf4j:1.7.36')
   implementation('org.apache.httpcomponents.core5:httpcore5:5.2')
   implementation('org.apache.httpcomponents.client5:httpclient5:5.2.1')
   implementation('info.picocli:picocli:4.7.3')
   implementation('info.picocli:picocli-groovy:4.7.3')
   implementation("org.codehaus.groovy:groovy:${groovyVersion}")
   implementation("org.codehaus.groovy:groovy-json:${groovyVersion}")
   // esig additional dependencies

   implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core")
   implementation('io.projectreactor.kotlin:reactor-kotlin-extensions:1.2.2')

   implementation("org.apache.sshd:sshd-sftp:2.9.0")

   implementation("io.swagger.core.v3:swagger-annotations")
   implementation("org.jdbi:jdbi3-kotlin:${jdbiVersion}") { transitive = false}
   implementation("org.jdbi:jdbi3-sqlobject:${jdbiVersion}") { transitive = false}
   implementation("org.jdbi:jdbi3-kotlin-sqlobject:${jdbiVersion}")  { transitive = false}

   implementation("org.apache.commons:commons-lang3:3.12.0")
   implementation("commons-io:commons-io:2.15.1")
   implementation("commons-codec:commons-codec:1.16.0")
   implementation('org.apache.commons:commons-csv:1.10.0')
   implementation('com.google.guava:guava:31.1-jre') { transitive = false }
   implementation('com.github.librepdf:openpdf:1.3.30')
   implementation('org.eclipse.collections:eclipse-collections:11.1.0')
   implementation("com.opencsv:opencsv:3.7")

   implementation("org.zeroturnaround:zt-exec:1.12")

   testImplementation("io.micronaut.flyway:micronaut-flyway")
   testImplementation "io.micronaut.test:micronaut-test-junit5"
   testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'
   testImplementation("io.micronaut:micronaut-http-client")
   testImplementation("org.codehaus.groovy:groovy-sql")
   testImplementation("com.github.javafaker:javafaker:1.0.2") {
      exclude group: 'org.yaml', module: 'snakeyaml'
   }
   testImplementation 'com.github.tomakehurst:wiremock-jre8-standalone:2.35.0'
}

configurations.implementation { // just need to use slf4j's commons-logging implementation
   exclude group: 'commons-logging', module: 'commons-logging'
}

test.classpath += configurations.developmentOnly

mainClassName = "com.cynergisuite.middleware.Application"

run.classpath += configurations.developmentOnly
run.jvmArgs("-noverify", "-XX:TieredStopAtLevel=1", "-Dcom.sun.management.jmxremote", "-Dmicronaut.environments=local")

boolean verboseMode = System.getenv().containsKey("VERBOSE_MODE")
test {
   useJUnitPlatform()
   maxHeapSize = "4096m"
   retry {
      maxRetries = 2
      maxFailures = 20
      failOnPassedAfterRetry = false
   }
   if (verboseMode) {
      testLogging.showStandardStreams = true
   }
}

jacoco {
   toolVersion = "0.8.7"
}

allOpen {
   annotation("io.micronaut.http.annotation.Controller")
   annotation("io.micronaut.aop.Around")
   annotation("io.micronaut.security.annotation.Secured")
   annotation("jakarta.inject.Singleton")
}

java {
   sourceCompatibility = JavaVersion.toVersion("11")
}

tasks {
   compileKotlin {
      kotlinOptions {
         jvmTarget = "11"
         freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
      }
   }
   compileTestKotlin {
      kotlinOptions {
         jvmTarget = "11"
         freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
      }
   }
}

compileGroovy.dependsOn compileKotlin
compileGroovy.classpath += files(compileKotlin.destinationDirectory)
classes.dependsOn compileGroovy

task flywayMigrateCynergiDb(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
   url = "jdbc:postgresql://localhost:6432/cynergidb"
   user = "cynergiuser"
   password = "password"
   locations = ["filesystem:src/main/resources/db/migration/postgres"]
}

task flywayMigrateCynergiDevelopDb(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
   url = "jdbc:postgresql://localhost:6432/cynergidevelopdb"
   user = "cynergiuser"
   password = "password"
   locations = ["filesystem:src/main/resources/db/migration/postgres"]
   cleanDisabled = false
   cleanOnValidationError = true
}

task flywayMigrateCynergiTestDb(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
   url = "jdbc:postgresql://localhost:7432/cynergitestdb"
   user = "postgres"
   password = "password"
   locations = ["filesystem:src/main/resources/db/migration/postgres"]
   cleanDisabled = false
   cleanOnValidationError = true
}

openApiGenerate {
   inputSpec = "$buildDir/tmp/kapt3/classes/main/META-INF/swagger/cynergi-middleware.yml".toString()
   validateSpec = false
   skipValidateSpec = false
}

task buildApiDocs(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
   generatorName = "html"
   inputSpec = "$buildDir/tmp/kapt3/classes/main/META-INF/swagger/cynergi-middleware.yml".toString()
   outputDir = "$buildDir/reports/openapi/".toString()
   version = releaseVersion.toString()
   auth = "Authorization:Bearer \${jwt}".toString()
   validateSpec = false
   skipValidateSpec = true
}

tasks.buildApiDocs.dependsOn(compileKotlin)

tasks.withType(JavaExec) {
   // Assign all Java system properties from
   // the command line to the JavaExec task.
   systemProperties System.properties
}

def currentCommit = {
   try {
      def hashStdOut = new ByteArrayOutputStream()

      exec {
         commandLine "git", "rev-parse", "--verify", "HEAD"
         standardOutput = hashStdOut
      }

      return hashStdOut.toString().trim()
   } catch (ignored) {
      println("Unable to determine commit")
      return "N/A"
   }
}

def currentBranch = {
   try {
      def branchStdOut = new ByteArrayOutputStream()

      exec {
         commandLine "git", "rev-parse", "--abbrev-ref", "HEAD"
         standardOutput = branchStdOut
      }

      return branchStdOut.toString().trim()
   } catch (ignored) {
      println("Unable to determine branch")
      return "N/A"
   }
}

shadowJar {
   archiveFileName = "cynergi-middleware.jar"
}

jar {
   manifest {
      attributes(
         "HT-Built-By": System.properties["user.name"],
         "HT-Build-Timestamp": new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
         "HT-Build-Revision": currentCommit(),
         "HT-Source-Branch": currentBranch(),
         "HT-Created-By": "Gradle ${gradle.gradleVersion}",
         "HT-Build-Jdk": "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
         "HT-Build-OS": "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
         "HT-App-Version": releaseVersion
      )
   }
}
