package <%= fullDomainPackage %>.infrastructure

import <%= fullDomainPackage %>.<%= domain %>Service
import <%= fullDomainPackage %>.<%= domain %>ValueObject
import <%= pkg %>.<%= appName %>.authentication.infrastructure.AccessControl
import <%= pkg %>.<%= appName %>.error.ValidationException
import <%= pkg %>.<%= appName %>.error.NotFoundException
import io.micronaut.http.MediaType.APPLICATION_JSON
import io.micronaut.http.annotation.Body
import io.micronaut.http.annotation.Controller
import io.micronaut.http.annotation.Get
import io.micronaut.http.annotation.Post
import io.micronaut.http.annotation.Put
import io.micronaut.http.annotation.QueryValue
import io.micronaut.security.annotation.Secured
import io.micronaut.security.rules.SecurityRule.IS_AUTHENTICATED
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import javax.inject.Inject

@Secured(IS_AUTHENTICATED) // require access to this controller to at the very least be authenticated
@Controller("/api/<%= table %>") // TODO CHECK THAT THIS PATH IS CORRECT!!
class <%= domain %>Controller @Inject constructor(
   private val <%= repository %>Service: <%= domain %>Service
) {
   private val logger: Logger = LoggerFactory.getLogger(<%= domain %>Controller::class.java)

   @Throws(NotFoundException::class)
   @AccessControl("<%= repository %>-fetchOne")
   @Get(value = "/{id}", produces = [APPLICATION_JSON])
   fun fetchOne(
      @QueryValue("id") id: Long
   ): <%= domain %>ValueObject {
      logger.info("Fetching <%= domain %> by {}", id)

      val response = <%= repository %>Service.fetchById(id = id) ?: throw NotFoundException(id)

      logger.debug("Fetching <%= domain %> by {} resulted in", id, response)

      return response
   }

   @Post(processes = [APPLICATION_JSON])
   @AccessControl("<%= repository %>-save")
   @Throws(ValidationException::class, NotFoundException::class)
   fun save(
      @Body vo: <%= domain %>ValueObject
   ): <%= domain %>ValueObject {
      logger.info("Requested Save <%= domain %> {}", vo)

      val response = <%= repository %>Service.create(vo = vo)

      logger.debug("Requested Save <%= domain %> {} resulted in {}", vo, response)

      return response
   }

   @Put(processes = [APPLICATION_JSON])
   @AccessControl("<%= repository %>-update")
   @Throws(ValidationException::class, NotFoundException::class)
   fun update(
      @Body vo: <%= domain %>ValueObject
   ): <%= domain %>ValueObject {
      logger.info("Requested Update <%= domain %> {}", vo)

      val response = <%= repository %>Service.update(vo = vo)

      logger.debug("Requested Update <%= domain %> {} resulted in {}", vo, response)

      return response
   }
}
