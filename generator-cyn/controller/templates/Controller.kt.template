package com.hightouchinc.cynergi.middleware.controller

import com.hightouchinc.cynergi.middleware.entity.<%= entity %>Dto
import com.hightouchinc.cynergi.middleware.exception.NotFoundException
import com.hightouchinc.cynergi.middleware.exception.ValidationException
import com.hightouchinc.cynergi.middleware.service.<%= entity %>Service
import com.hightouchinc.cynergi.middleware.validator.<%= entity %>Validator
import io.micronaut.http.MediaType.APPLICATION_JSON
import io.micronaut.http.annotation.Body
import io.micronaut.http.annotation.Controller
import io.micronaut.http.annotation.Get
import io.micronaut.http.annotation.Post
import io.micronaut.http.annotation.Put
import io.micronaut.http.annotation.QueryValue
import io.micronaut.validation.Validated
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import javax.inject.Inject
import javax.validation.Valid

@Validated
@Controller("/api/TODO add valid path here")
class <%= entity %>Controller @Inject constructor(
   private val <%= repository %>Service: <%= entity %>Service,
   private val <%= repository %>Validator: <%= entity %>Validator
) {
   private val logger: Logger = LoggerFactory.getLogger(<%= entity %>Controller::class.java)

   @Throws(NotFoundException::class)
   @Get(value = "/{id}", produces = [APPLICATION_JSON])
   fun fetchOne(
      @QueryValue("id") id: Long
   ): <%= entity %>Dto {
      logger.info("Fetching <%= entity %> by {}", id)

      val response = <%= repository %>Service.fetchById(id = id) ?: throw NotFoundException(id)

      logger.debug("Fetching <%= entity %> by {} resulted in", id, response)

      return response
   }

   @Post(processes = [APPLICATION_JSON])
   @Throws(ValidationException::class, NotFoundException::class)
   fun save(
      @Valid @Body dto: <%= entity %>Dto
   ): <%= entity %>Dto {
      logger.info("Requested Save <%= entity %> {}", dto)

      <%= repository %>Validator.validateSave(dto = dto)

      val response = <%= repository %>Service.create(dto = dto)

      logger.debug("Requested Save <%= entity %> {} resulted in {}", dto, response)

      return response
   }

   @Put(processes = [APPLICATION_JSON])
   @Throws(ValidationException::class, NotFoundException::class)
   fun update(
      @Valid @Body dto: <%= entity %>Dto
   ): <%= entity %>Dto {
      logger.info("Requested Update <%= entity %> {}", dto)

      <%= repository %>Validator.validateUpdate(dto = dto)

      val response = <%= repository %>Service.update(dto = dto)

      logger.debug("Requested Update <%= entity %> {} resulted in {}", dto, response)

      return response
   }
}
