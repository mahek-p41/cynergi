package com.hightouchinc.cynergi.middleware.service

import com.hightouchinc.cynergi.middleware.entity.<%= entity %>
import com.hightouchinc.cynergi.middleware.entity.<%= entity %>Dto
import com.hightouchinc.cynergi.middleware.repository.<%= entity %>Repository
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class <%= entity %>Service @Inject constructor(
   private val <%= repository %>Repository: <%= entity %>Repository
) : IdentifiableService<<%= entity %>Dto> {
   override fun fetchById(id: Long): <%= entity %>Dto? =
      <%= repository %>Repository.findOne(id = id)?.let { <%= entity %>Dto(entity = it) }

   fun exists(id: Long): Boolean =
      <%= repository %>Repository.exists(id = id)

   fun create(dto: <%= entity %>Dto): <%= entity %>Dto =
      <%= entity %>Dto(
         entity = <%= repository %>Repository.insert(entity = <%= entity %>(dto = dto))
      )

   fun update(dto: <%= entity %>Dto): <%= entity %>Dto =
      <%= entity %>Dto(
         entity = <%= repository %>Repository.update(entity = <%= entity %>(dto = dto))
      )
}
